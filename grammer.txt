program     -> func-stat
func-stat   -> func id stmt-list endf
stmt-list   -> {stmt}
stmt        -> if-stmt | while-stmt | assign-stmt | return-stmt
if-stmt     -> if exp then stmt-list [else stmt-list] endi
while-stmt  -> while exp do stmt-list endw
assign-stmt -> id is exp
return-stmt -> return exp
exp         -> logic-exp [logic logic-exp]
logic       -> and | or
logic-exp   -> simple-exp [comp simple-exp]
comp        -> > | < | =
simple-exp  -> term {addop term}
addop       -> + | -
term        -> factor {mulop factor}
mulop       -> * | /
factor      -> (exp) | num | id | random | const
random      -> random(exp)
const       -> current | my(exp) | opponent(exp)

random: generate a int value between 0 and the argument
current: return the next step count of either strategy in battle
my: return the value of the step count in self-history
opponent: return the value of the step count argument in opponent-history

limit token:
    func endf
    if then else endi
    while do endw
    is
    return
    and or
    comp addop mulop
    random current my opponent

value token:
    num         -> [0-9]+
    id          -> [a-zA-Z]+